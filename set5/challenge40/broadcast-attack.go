package main

import (
	"math/big"
	"fmt"
	"cryptopals/utils"
)

var (
	ns = [...]string{"112721601918683797168428127901192465102525069928986359348982596823703226449673990846090932539386700340330525619092085513714305219400970880680117163178305986813808635587839330945814454487244041235607143962877572288016309015718399120610449052617691462748100013530671980127664179953907351359684101008521853110223",
		"141205320071516810126400026046317846767250232684598971918835218475369012418316104863239455303871740462823284836013777363326801232630949605849616185047991952750541141297120648322884484671584794082330454917416183658078749736073963366410864799059230313019367031024633616917304863771554779541607569452487955456559",
		"167258888080617658506741786211103481052939424890632982112316037008262377941697140035896873380934775513662466876831662443939856988435465383335916051452925486304935923716256213690746538350844375772934359988905666123913406840854860917140631344724077607350267728162985057069072027925897686446061634964429029003491",
	}
	cs = [...]string{"73000658378860311116615743327162980086489673161100640494767026335422701609118427932487136323982349200749576946110603903161151115845284196986432755720582304242796151323004279278757882853333144763898297373449522679583764559925533113618893184578365503748953748468232196289517988349940156847324792987394822617352",
		"75698141411239879021016386372120626749818025923226971495936891149418329233128685464642229700708282476556593927432769801675278689743065737102758892449158189879630313741633058949922484452609556581260177985605536914337101427616717215123852465230253079701828667024910513534503244677591325189681796632993388007049",
		"132002631117851989979211914802587239153648670311442959846027035585109989137397018518918386274200128526830648888331181061592091138700647037895399806446603157427887757532501863514484117641978184027474468460178854576702678825357853940307281717285973531884160566673708754707946690941820569575348662720847760438610",
	}
)

var n, c []*big.Int = make([]*big.Int, 3), make([]*big.Int, 3)

func init() {

	for i, v := range(ns) {
		n[i], _ = new(big.Int).SetString(v, 10)
		c[i], _ = new(big.Int).SetString(cs[i], 10)
	}

}

func term(i int) *big.Int {
	var other1, other2 = (i + 1) % len(n), (i + 2) % len(n)
	var v, ms big.Int

	ms.Mul(n[other1], n[other2])

	// (c_0 * m_s_0 * invmod(m_s_0, n_0))
	v.Mul(c[i], &ms)
	inv, e := utils.InvMod(&ms, n[i])
	if e != nil {
		panic("BLERRG!")
	}
	v.Mul(&v, inv)

	return &v
}

func main() {
	// result =
	//   (c_0 * m_s_0 * invmod(m_s_0, n_0)) +
	//   (c_1 * m_s_1 * invmod(m_s_1, n_1)) +
	//   (c_2 * m_s_2 * invmod(m_s_2, n_2)) mod N_012

	var total = big.NewInt(0)

	for i := range(n) {
		total.Add(total, term(i))
	}

	var n_all big.Int
	n_all.Mul(n[0], n[1])
	n_all.Mul(&n_all, n[2])

	// cryptopals says this next step isn't neccessary:
	total.Mod(total, &n_all)

	result := utils.CubeRoot(total)
	fmt.Printf("%q\n", result.Bytes())
}
